/*
|
|
|
|
|
../app2023.js
../app2023.css
../index.html
../extern/

      /assets
        /css
          /core/preloader.css

          /lib/bootstrap.min.css
          /lib/icons/fonts[folder] and svg icons
          /lib/icons/bootstrap-icons.json
          /lib/icons/bootstrap-icons.css

        /img
          /canada_logo.svg
          /dnd_logo_en.svg
          /dnd_logo_fr.svg
          /tdd.svg
          /tdd.png

        /js
          /core
            /dictionary.js
            /lib.js
            /toc.js
            /ui.js
            util.js

          /lib/bootstrap.bundle.min.js
|
|
|
|
|
*/

/*  app2023.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

// This includes all global vars and js files loader
import "./assets/js/core/util.js";

// import './assets/js/test.js'

tdd.App = {
  // Get the language from saba
  init() {
    //language observer
    const observer = new MutationObserver(() => {
      if (Var_lang.getValue()) {
        currentLanguage = Var_lang.getValue();
        lang = currentLanguage;
        info("lang => ", lang);

        // hide preloader
        tdd.$preloader.classList.add("preloader-hidden");

        observer.disconnect();

        // preset the checker variables
        tdd.ready.js = false;
        tdd.ready.toc = false;
        tdd.ready.ui = false;

        // call the function to load js files
        tdd.App.get_js();
        // tdd.App.get_data()

        // lang === 'title' ? tdd.covers.buildTitle() : ''
        // lang === 'en' || lang === 'fr' ? modifyDOM(lang) : ''
      }
    });

    // These are observer related elements
    const target = $body;
    const config = { childList: true };
    observer.observe(target, config);
    // return tdd.App.get_js()
  },

  // Load JS files before TOC js
  get_js() {
    // tdd.js_loaded = false
    // tdd.ready.js = false

    // This is the list of js files to be loaded before start
    let arr = [
      "./assets/js/core/dictionary.js",
      "./assets/js/core/lib.js",
      "./assets/js/core/ui.js"
      // "./assets/js/options.js",
      // "./assets/js/modal.js",
      // "./assets/js/init.js",
      // "./assets/js/nav.js",
      // "./assets/js/event.js",
      // "./assets/js/covers.js",
      // "./assets/js/toc.js",
      // "./assets/js/app.js"
    ];

    tdd.loadJS(arr);
    // return tdd.App.get_data(tdd.js_loaded)
    // return this.get_data(tdd.js_loaded)
    return this.get_data(tdd.ready.js);
  },

  // Load TOC js file after loading the supporting JS files
  // get_data: (js_loaded) => {
  get_data() {
    // This is waiting for the loaded js files to complete before calling the toc js builder
    const interval = setInterval(() => {
      info("Waiting for data...");
      // if( !tdd.js_loaded ) {
      if (!tdd.ready.js) {
        log("Waiting for data...");
        //Do Something While Waiting / Spinner Gif etc.
      } else {
        info("Data found...");
        clearInterval(interval);
        import("./assets/js/core/toc.js");
        // import('./assets/js/core/ui.js')
      }
    }, 500);

    return;
  },

  // Add generated TOC list to DOM element generated by UI
  process_data(rendered_toc) {
    // tdd.ui_loaded = false

    info("Processing data");
    info("Received data", rendered_toc);

    // This is waiting for UI to be generated then to render the accordion TOC in its parent
    const interval = setInterval(() => {
      info("Waiting for UI...");
      if (!tdd.ready.ui) {
        log("WAITING FOR UI");
        //Do Something While Waiting / Spinner Gif etc.
      } else {
        info("UI LOADED...");
        clearInterval(interval);

        $body.appendChild(rendered_toc);
      }
    }, 500);

    // return

    // $body.appendChild(rendered_toc)

    // info ('Received data', tdd.toc.list)
    return;
  }
};
window.addEventListener("DOMContentLoaded", tdd.App.init);

/*  util.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

globalThis.log = console.log;
globalThis.info = console.info;
globalThis.warn = console.warn;
globalThis.error = console.error;
globalThis.trace = console.trace;
globalThis.table = console.table;
/*	=====================================================================================	*/
globalThis.tdd = {};
tdd.ready = {};
tdd.course = {};
/*	=======================================================	*/

//	GLOBAL VARIABLES
globalThis.$html = document.getElementsByTagName("html")[0];
globalThis.$body = document.body;
globalThis.$pageDiv = document.getElementById("pageDIV");
globalThis.$toc = "";

// $pageDiv.style.display = 'none'
// $pageDiv.style.visibility = 'hidden'

globalThis.lang = "";
globalThis.currentLanguage = "";

globalThis.myArr = [];
/*	=====================================================================================	*/

// LOADER
tdd.$preloader_cont = document.createElement("div");
tdd.$preloader_cont.id = "preloader_cont";
$body.prepend(tdd.$preloader_cont);

tdd.$preloader = document.createElement("div");
tdd.$preloader.id = "preloader";
// $body.prepend(tdd.$preloader)
tdd.$preloader_cont.appendChild(tdd.$preloader);

let logo = document.createElement("img");
logo.src = "./assets/img/tdd.png";
logo.width = "200";
logo.height = "100";
logo.id = "logo";
tdd.$preloader_cont.appendChild(logo);

window.addEventListener("load", () => {
  // $preloader.classList.add('preloader-hidden')
  tdd.$preloader.addEventListener("transitionend", () => {
    // $body.removeChild(tdd.$preloader)
    $body.removeChild(tdd.$preloader_cont);
  });
});

/*	=====================================================================================	*/

//load js files from array
tdd.loadJS = (arr) => {
  let count = 0;
  let js_df = new DocumentFragment();

  arr.forEach((item) => {
    let scriptObj = document.createElement("script");

    scriptObj.setAttribute("src", item);
    scriptObj.setAttribute("type", "module");
    scriptObj.setAttribute("async", true);

    js_df.appendChild(scriptObj);
    count++;

    // success event
    scriptObj.addEventListener("load", () => {
      // info('Script file loaded: ', item)
    });

    // error event
    scriptObj.addEventListener("error", (ev) => {
      error(item, ev, "JS error");
    });
  });

  // log('count => ', count, ' and arr.length = ', arr.length)

  if (count === arr.length) {
    // tdd.js_loaded = true
    tdd.ready.js = true;
    $body.appendChild(js_df);
  } else {
    error("Problem in loading JS files");
  }
};

/*  lib.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

/*!
===============================================================
* Script: tdd.lib v1.0.1
* Autor: Ahmed Hussein
* Copyright 2011-2023
* Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
===============================================================
20230131:
    	- 
===============================================================
TO FIX:
    	- 
===============================================================
*/
//const log = console.warn;

tdd.lib = {
  delay(callBackFunction, tim = 2000) {
    //return a promise that waits before resolving
    log("waiting.......");
    return new Promise((resolve) => {
      setTimeout(callBackFunction, tim);
    });
  },

  /*	===================================================	*/

  //	- Set span class
  set_span_class(el, className) {
    el.className = "";
    el.classList.add(className);
  },

  /*	===================================================	*/

  //	- Get the opposite sibling of an object in a nested object
  getTwin(ref, nestedObj) {
    let tmp = "";
    for (el in nestedObj) if (el != ref) tmp = nestedObj[el];
    return tmp;
  },

  /*	===================================================	*/

  //  - Get nested object list
  getNestedArr(ref, nestedObj, flag) {
    let tmpArr = [];
    if (flag) {
      for (el in nestedObj) tmpArr.push(nestedObj[el][ref]);
    } else {
      for (el in nestedObj) tmpArr.push(el);
    }
    return tmpArr;
  },

  /*	===================================================	*/

  //	- Get clicked nav options button link
  getClickedOption(ref, nestedObj, flag) {
    let tmp = "";
    for (el in nestedObj) if (el === ref) tmp = nestedObj[el];
    return tmp;
  },

  /*	===================================================	*/

  // - Filter By Item Type
  filter_itemType(arr, val) {
    let filterArr = [];
    for (let i = 0; i < arr.length; i++)
      if (arr[i].type === val) filterArr.push(i);
    return filterArr;
  },

  /*	===================================================	*/

  // - Filter By popup page name
  // INPUT:	- Array and filter value
  // RETURN:	- Filtered array including filtered indexes
  filter_itemName(arr, val) {
    let filterArr = {};
    for (let i = 0; i < arr.length; i++)
      if (arr[i].name.toLowerCase() === val.toLowerCase()) filterArr = arr[i];
    return filterArr;
  },

  /*	===================================================	*/

  // USAGE:	- Append multiple children to 1 Parent
  // INPUT:	- Array and target element
  // RETURN:	- updated > target element

  append_multiple(arr, targetElement) {
    arr.forEach((i) => targetElement.appendChild(i));
  },

  /*	===================================================	*/

  set_Attribute_multiple(attr, parameter, arr, arr2, strToRemove, strToPlace) {
    for (let i = 0; i < arr2.length; i++) {
      let newValue = arr2[i].replace(strToRemove, strToPlace);
      if (attr) {
        arr[i].setAttribute(parameter, newValue);
      } else {
        arr[i][parameter] = newValue.toLowerCase();
      }
    }
  },

  /*	===================================================	*/

  // - Apply id to multiple elements based on their obj definition
  set_ID_multiple(arr, arr2, strToRemove, strToPlace) {
    for (let i = 0; i < arr2.length; i++) {
      let targetID = arr2[i].replace(strToRemove, strToPlace);
      arr[i].id = targetID;
    }
  },

  /*	===================================================	*/

  // - Assign class to multiple elements based on their obj definition
  set_Class_multiple(arr, classNames) {
    for (let i = 0; i < arr.length; i++)
      classNames.forEach((j) => arr[i].classList.toggle(j));
  },

  /*	===================================================	*/

  // - Remove Attribute from multiple elements based on their obj definition
  remove_Attribute_multiple(arr, attrName) {
    for (let i = 0; i < arr.length; i++) arr[i].removeAttribute(attrName);
  },

  /*	===================================================	*/

  // - Remove Attribute from multiple elements based on their obj definition
  remove_Style_multiple(arr, styleNames) {
    for (let i = 0; i < arr.length; i++)
      styleNames.forEach((j) => (arr[i].style.j = null));
  },

  /*	===================================================	*/

  // - Remove Attribute from multiple elements based on their obj definition
  remove_Style_multiple_children(arr, styleNames) {
    for (const el of arr) {
      styleNames.forEach((j) => {
        el.style.removeProperty([j]);

        for (const ell of el.children) {
          styleNames.forEach((k) => {
            ell.style.removeProperty([k]);
          });
        }
      });
    }
  },

  /*	===================================================	*/

  // - format HTML, body and PageDiv
  extract_table_children(el) {
    for (let el_child of el.children) {
      if (el_child.tagName === "P") {
        el_child.parentNode.removeAttribute("style");
        el_child.parentNode.innerHTML = el_child.innerHTML;
      } else {
        log("table cel might have more than a child");
      }
    }
    return;
  },

  /*	===================================================	*/

  Hide_items(itemParam, dropTarget, unsure) {
    let itemsCollection = document.querySelectorAll(itemParam);
    for (const el of itemsCollection) {
      let hasClass = el.hasAttribute("class");
      if (!hasClass) {
        dropTarget.appendChild(el);
      } else {
        if (!unsure) {
          dropTarget.appendChild(el);
        }
      }
    }
  },

  /*	===================================================	*/

  replaceTag(elTarget, elType) {
    let $oldEl = elTarget;
    let $newEl = document.createElement(elType);

    Array.from($oldEl.attributes).map((el) =>
      $newEl.setAttribute(el.name, el.value)
    );

    $oldEl.parentNode.insertBefore($newEl, $oldEl);
  },

  /*	===================================================	*/

  removeElements(arr) {
    for (let el of arr) {
      if (el.children.length < 1) {
        el.remove();
      } else {
        log("FN removeElements: found non empty Anchor => ", el);

        if (el.children[0].tagName === "IFRAME") {
          log("IFRAME FOUND");
          formatIframe(el);
        }
      }
    }
  },

  /*	===================================================	*/

  // - Remove elements of any given array
  removeEmptyNesting(elem) {
    for (let el of elem.children) {
      if (el.children.length < 1) {
        el.remove();
      } else {
        log("CLEANUP: found non empty Anchor => ", el);
      }
    }
  },

  /*	===================================================	*/

  formatCs(arr) {
    for (let el of arr) {
      el.removeAttribute("style");
      el.classList.add("flex-fill", "p-3", "position-relative");
    }
  },

  /*	===================================================	*/

  populate_module_pages(arr, tmpArr) {
    let myArr = [];
    let p = 0;
    for (let n = 0; n < tmpArr.length; n++) {
      myArr[n] = arr.slice(tmpArr[n], tmpArr[n + 1]);

      for (let k = 0; k < myArr[n].length; k++) {
        if (myArr[n][k].type === "page") {
          p = p + 1;
          myArr[n][k].moduleNumber = n + 1;
          myArr[n][k].pageLocal = k;
          myArr[n][k].pageGlobal = p;

          if (myArr[n][k].active) {
            globalThis.activePagePosition = myArr[n][k].pageGlobal;
          }
        }
      }
    }
    return myArr;
  },

  /*	===================================================	*/

  grouped_pages(arr, tmpArr, ref_type) {
    let myArr = [];
    let p = 0;
    for (let n = 0; n < tmpArr.length; n++) {
      // info('n: ', n, ' tmpArr[n] =>', tmpArr[n])

      myArr[n] = arr.slice(tmpArr[n], tmpArr[n + 1]);
      // info('myArr[n] = >', myArr[n])

      for (let k = 0; k < myArr[n].length; k++) {
        // info('n: ', n, ' k: ', k, ' myArr[n][k] = >', myArr[n][k])

        if (myArr[n][k].type === ref_type) {
          p = p + 1;
          myArr[n][k].module = n + 1;
          myArr[n][k].local = k;
          myArr[n][k].global = p;
          // log('n: ', n, ' k: ', k, ' myArr[n][k].type => ', myArr[n][k].type, ' local > ', myArr[n][k].local, ' > global: ', myArr[n][k].global)

          if (myArr[n][k].active) {
            tdd.currentPage = myArr[n][k].global;
            // log('tdd.currentPage => ', tdd.currentPage)
          }
        }
        // log('inner loop K > ', k)
        // log('')
      }
      // let pp = tmpArr.length - 1
      // log('inner loop ended > ', myArr[tmpArr.length - 1][myArr.length - 1])
      // log('outer loop N > ', n)
      // log('----------------------------------------------------------------')
    }
    // log('outer loop ended > ', tmpArr[tmpArr.length - 1])
    return myArr;
  }

  /*	===================================================	*/

  // delete Property/'s from Object
  // delete_obj_props(ref_item, arr) {
  //     arr.forEach((prop, index, arr) => {
  //         delete ref_item.prop
  //     })
  //     return
  // }
};
/*	===================================================	*/
log("tdd.lib -------> END");

/*  dictionary.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

/*!
===================================================================================
* Script: dictionary v1.0.1
* Autor: Ahmed Hussein
* Copyright 2011-2021 
* Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
===================================================================================
TO DO:
    - 
===================================================================================
TO FIX:
    - 
===================================================================================
*/

/*
==========================================================
============================================================
==============================================================
============================================================
==========================================================
*/
//globalThis.tdd_dictionary = {
tdd.dictionary = {
  //export const tdd_dictionary = {
  /*
    ======================================================
    USAGE:
            - Define template bilingual labels for layout elements
    
    INPUT:
            - Table element
    
    RETURN:
            -
    ======================================================
    TO DO:
            - course navigation => Next / prev
            - copyrights in footer
            - go to top of the page
            - TOC title
            - modal options title
            - options navigation
            - extra text boxes
            - accessibility titles
            - tooltips
    ======================================================
    TO FIX:
            -
    ======================================================
    */
  core: {
    lang: {
      en: "en",
      fr: "fr"
    },
    cover: {
      buttons: { en: "Start Course", fr: "Start Course FR" }
    },
    navigation: {
      prev: { en: "PREV", fr: "FR PREV" },
      next: { en: "NEXT", fr: "FR NEXT" },
      exit: { en: "EXIT", fr: "FR EXIT" }
    },
    navigation_name: {
      prev: { en: "Previous Page", fr: "FR Previous Page" },
      next: { en: "Next Page", fr: "FR Next Page" },
      exit: { en: "Exit Title", fr: "FR Exit Title" }
    },
    page_number_spacer: {
      en: "/",
      fr: "de"
    }
  },
  labels: {
    toc: {
      title: { en: "TOCC TITLE", fr: "FR TOC TITLE" }
    },
    modal_options_core: {
      button: { en: "SETTINGS", fr: "FR SETTINGS" },
      title: { en: "Course Options", fr: "Course Options" }
    },
    modal_options: {
      glossary: {
        en: "GLOSSARY",
        fr: "FR GLOSSARY",
        icon: "cog",
        en_link: "internal",
        fr_link: "internal"
      },
      resources: {
        en: "RESOURCES",
        fr: "FR RESOURCES",
        icon: "globe",
        en_link: "internal",
        fr_link: "internal"
      },
      pdf: {
        en: "PDF",
        fr: "FR PDF",
        icon: "arrow-left",
        en_link: "print_en.pdf",
        fr_link: "print_fr.pdf"
      },
      help: {
        en: "HELP",
        fr: "FR HELP",
        icon: "arrow-right",
        en_link: "internal",
        fr_link: "internal"
      },
      language: {
        //                en: 'ENGLISH',
        //                fr: 'Français',
        en: "Français",
        fr: "ENGLISH",
        icon: "globe",
        // EN link goes to the French page and viceVersa
        en_link: "ENGLISH",
        fr_link: "Français"
      },
      exit: {
        en: "EXIT",
        fr: "FR EXIT",
        icon: "star",
        en_link: "exit",
        fr_link: "exit"
      }
    },
    footer: {
      copyright: {
        en: "EN COPYRIGHT From Dictionary JavaScript file",
        fr: "FR COPYRIGHT From Dictionary JavaScript file"
      }
    }
  }
};

log("tdd.dictionary -------> END");

/*  toc.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

/*!
===============================================================
* Script: tdd.toc v1.0.1
* Autor: Ahmed Hussein
* Copyright 2011-2023
* Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
===============================================================
20230223:
- 
===============================================================
TO FIX:
    	- 
===============================================================
*/
log("tdd.toc -------> START");
tdd.toc = {
  // get toc data from DOM
  init() {
    log("tdd.toc init > loaded");

    // get raw toc from DOM Form element
    const $src = $body.querySelector('[title="refTOC"]');

    //extract raw data
    const raw_toc = this.extract($src);
    // log('raw_toc = ', raw_toc)

    //     tdd.toc.get_titles()

    // this.get_titles(raw_toc)

    // get 2 language titles
    const titles = this.get_titles(raw_toc);
    if (titles.length != 0) {
      log("evaluated titles => ", titles);
      // tdd.toc.list = this.eval_toc(en_toc, fr_toc)

      // Fill master toc list
      tdd.toc.list = this.eval_toc(titles[0], titles[1]);
    }

    if (tdd.toc.list.length != 0) {
      log("tdd.toc.list => ", tdd.toc.list);

      // generate navigation menu
      $toc = this.generate_toc();
    }

    // return tdd.App.process_data($src)
    return tdd.App.process_data($toc);
  },

  // extract data from DOM select option
  extract(obj) {
    // log(obj)
    let arr = [];

    // Define obj Keys
    let itemIndex,
      itemRawText,
      itemText,
      itemLink,
      itemSelected,
      itemLevel,
      itemType;

    // Fill the main array
    Array.from(obj).forEach((item, index) => {
      itemIndex = item.index;
      itemRawText = item.innerHTML;
      itemText = itemRawText.split("&nbsp;&nbsp;").join("");
      itemLink = item.getAttribute("value");
      itemSelected = item.getAttribute("selected");
      itemType = "p";

      // Get the current Page Index
      itemSelected !== null ? (itemSelected = 1) : (itemSelected = 0);

      // Get list item level
      itemLevel = itemRawText.split("&nbsp;&nbsp;").length - 1;

      // Set Type
      // itemLevel === 3 || 4 || 5 || 6 || 7 ? itemType = 'p': ''
      itemLevel === 2 ? (itemType = "module") : "";
      itemLevel === 1 ? (itemType = "title") : "";
      itemLevel === 0 ? (itemType = "unit") : "";

      // Push obj to array
      arr.push({
        index: itemIndex,
        en_name: itemText,
        fr_name: "",
        en_link: itemLink,
        fr_link: "",
        active: itemSelected,
        level: itemLevel,
        type: itemType,
        module: "",
        global: "",
        local: ""
      });
    });

    //remove Assignable unit from the beginning of the array
    // arr.shift()

    // arr[0].level === arr[1].level ? arr[0].type = 'cover' : ''
    arr[1].level === arr[2].level ? (arr[1].type = "cover") : "";

    // log('EXTRACTED arr = ', arr)

    return arr;
    // return arr, this.get_titles()
  },

  //get_titles
  get_titles(raw_toc) {
    let return_arr = [];
    // Filter the titles to get number of titles
    const filtered_titles = tdd.lib.filter_itemType(raw_toc, "title");
    // log('filtered_titles = ', filtered_titles)

    let isBilingual = "";
    if (filtered_titles.length % 2 == 0) {
      let checkName = raw_toc[filtered_titles.slice(-1)[0]].en_name;
      // log('checkName = ', checkName)

      // TRUE > Bilingual | No > POPUPS
      // FALSE > Singular | Yes > POPUPS
      checkName.toLowerCase() != "popups | do not alter"
        ? (isBilingual = true)
        : (isBilingual = false);
    } else {
      // TRUE > Bilingual | Yes > POPUPS
      // FALSE > Singular | No > POPUPS
      filtered_titles.length === 1
        ? (isBilingual = false)
        : (isBilingual = true);
    }
    // log('isBilingual => ', isBilingual)

    //Prepare TOC based on current language
    const en_toc = raw_toc.slice(filtered_titles[0], filtered_titles[1]);
    const fr_toc = raw_toc.slice(filtered_titles[1], filtered_titles[2]);
    const popup_toc = raw_toc.slice(filtered_titles[2], -1);

    // log('en_toc = ', en_toc)
    // log('fr_toc = ', fr_toc)
    // log('popup_toc = ', popup_toc)

    let mismatch = 0;
    if (en_toc.length != fr_toc.length) {
      tdd.errors.toc_mismatch_in_structure = `tdd.toc.get_titles error: Mismatch between EN ${en_toc.length} and FR ${fr_toc.length}`;

      error(tdd.errors.toc_mismatch_in_structure);
      alert(tdd.errors.toc_mismatch_in_structure);
    } else {
      for (let i = 0; i < en_toc.length; i++) {
        if (en_toc[i].length != fr_toc[i].length) {
          mismatch += 1;

          tdd.errors.toc_mismatch_in_pages = `tdd.toc.get_titles error: ${mismatch} of mismatching(s) found at: " ${
            Object.keys({ en_toc })[0]
          } " and " ${Object.keys({ fr_toc })[0]} " at index ${n} => ${
            en_toc[n].length
          } and ${fr_toc[n].length}`;

          error(tdd.errors.toc_mismatch);
          alert(tdd.errors.toc_mismatch);
        }
      }

      // mismatch === 0 ? this.eval_toc(en_toc, fr_toc) : ''
      mismatch === 0 ? (return_arr = [en_toc, fr_toc]) : "";
    }
    return return_arr;
  },

  // is bilingual
  eval_toc(en_toc, fr_toc) {
    let module_ndx = 0;

    // define counters variables
    let module_count, local_count, global_count;
    module_count = local_count = global_count = 0;

    // clone one of the arrays to alter
    let toc_list = [...en_toc];
    log("toc_list = >>", toc_list);

    // add list properties to title and modules
    toc_list.filter((m, ndx, arr) => {
      m.type === "title" ? (m.list = new Array()) : "";

      if (m.type === "module") {
        // fill list array of parent
        arr[0].list.push(ndx);
        m.list = new Array();
      }
    });

    // will work on one instance lang to save processing
    toc_list.forEach((item, index, arr) => {
      item.index = index;

      // combine EN and FR data into a unified list
      item.fr_name = fr_toc[index].en_name;
      item.fr_link = fr_toc[index].en_link;

      // make sure the list has the active page
      if (currentLanguage === "fr") {
        item.active = fr_toc[index].active;
      }

      if (item.type === "p") {
        item.type = "page";
        global_count++;
        local_count++;

        // fill pages obj properties
        item.module = module_count;
        item.global = global_count;
        item.local = local_count;

        // get the current module index for the first child page (the previous item is the module)
        if (arr[index - 1].type === "module") {
          // get pos of current module
          module_ndx = index - 1;
          // log('arr[module_ndx].module', arr[module_ndx].module)

          // add first page position to parent module
          arr[module_ndx].list.push(index);
          // log(arrr[idx - 1]);
        } else {
          // if page is not the first child of the module
          if (item.module === arr[module_ndx].module) {
            // add pages positions to their parent module
            arr[module_ndx].list.push(index);
            // log(index, ' module_ndx => ', module_ndx)
          }
        }
      }

      if (item.type === "module") {
        // to fix the summary page properties
        if (index === toc_list.length - 1) {
          item.type = "page";
          item.global = global_count + 1;
          item.local = 0;

          // remove the summary from modules list
          arr[0].list.pop();

          // delete un-needed properties
          // delete item.local
          delete item.module;
          delete item.list;
        } else {
          // reset local page counter and increment the other ones
          local_count = 0;
          module_count++;
          item.module = module_count;

          // delete un-needed properties
          delete item.active;
          delete item.en_link;
          delete item.fr_link;
          delete item.global;
          delete item.local;
        }
      }

      if (item.type === "title") {
        // delete un-needed properties
        delete item.en_link;
        delete item.fr_link;
        delete item.module;
        delete item.global;
        delete item.local;
        delete item.level;
        delete item.index;
        delete item.active;

        // Remove the Starting [EN | ] and [FR | ] from modules names @ Saba Publisher
        item.en_name = item.en_name.slice(5);
        item.fr_name = item.fr_name.slice(5);
      }
      // delete un-needed properties
      delete item.index;
      delete item.level;
    });

    // Define the main list array
    // tdd.toc.list = [...toc_list]

    // Create the nav menu from list
    // return this.generate_toc()
    return toc_list;
  },

  // Build TOC
  generate_toc() {
    log("generate_toc = >");
    log("currentLanguage = >", currentLanguage);

    globalThis.$toc_df = new DocumentFragment();

    myArr = [...tdd.toc.list];
    log("myArr => ", myArr);

    const $accordion = document.createElement("div");
    $accordion.id = "accordion";
    $accordion.classList.add(`accordion`, "accordion-flush", "rounded-0");

    // const $list = [...toc_list];

    // const $accordion = document.createElement("div");
    // $accordion.id = "accordion";
    // $accordion.classList.add("accordion");

    let $item,
      $header,
      $button,
      $buttonSpan,
      $collapse,
      $accordionBody,
      $listItem,
      $listGroup,
      $lastListItem,
      counter;

    myArr.forEach((el, idx, arr) => {
      if (el.type === "module") {
        // log("el");
        $item = document.createElement("div");
        $item.id = `item${idx}`;
        $item.classList.add("accordion-item");

        $header = document.createElement("h2");
        $header.id = `heading${idx}`;
        $header.classList.add("accordion-header");

        $button = document.createElement("button");
        $button.classList.add(
          "accordion-button",
          "collapsed",
          "d-flex",
          "justify-content-between",
          "align-items-start"
        );
        $button.textContent = el[`${currentLanguage}_name`];

        $button.setAttribute("type", "button");
        $button.setAttribute("data-bs-toggle", "collapse");
        $button.setAttribute("data-bs-target", `#collapse${idx}`);
        $button.setAttribute("aria-expanded", false);

        $button.setAttribute("aria-controls", `collapse${idx}`);

        $buttonSpan = document.createElement("span");
        $buttonSpan.classList.add(
          "badge",
          "bg-primary",
          "badge-pill",
          "ms-auto",
          "flex-shrink-1"
        );

        $collapse = document.createElement("div");
        $collapse.id = `collapse${idx}`;

        $collapse.classList.add("accordion-collapse", "collapse");

        $collapse.setAttribute("aria-labelledby", `heading${idx}`);
        $collapse.setAttribute("data-bs-parent", `#${$accordion.id}`);

        $accordionBody = document.createElement("div");
        $accordionBody.classList.add("accordion-body");

        $listGroup = document.createElement("div");
        $listGroup.classList.add("list-group", "list-group-flush");

        counter = 0;

        arr.forEach((elP, index, arrP) => {
          if (elP.type === "page" && elP.module === el.module) {
            $listItem = document.createElement("a");
            $listItem.classList.add(
              "list-group-item",
              "list-group-item-action",
              "rounded-0"
            );

            $listItem.setAttribute("data-global", elP.global);
            $listItem.style.cursor = "pointer";
            if (elP.active === 1) {
              log(
                "elP.active === 1 -------------------------------------------------------------------------------"
              );
              // log('current TITLE ==========================================> ', arrP[0][`${currentLanguage}_name`])

              // log('current module ==========================================> ', arrP[elP.module][`${currentLanguage}_name`])
              // log('current module ==========================================> ', arr[idx][`${currentLanguage}_name`])

              log("elP check if no local => ", elP.local);

              // log('current Page ==========================================> ', elP[`${currentLanguage}_name`])
              if (elP.local != 0) {
                tdd.course.title = arrP[0][`${currentLanguage}_name`];
                tdd.course.module = arr[idx][`${currentLanguage}_name`];
                tdd.course.page = elP[`${currentLanguage}_name`];
              }
              log("Course Data => ", [
                tdd.course.title,
                tdd.course.module,
                tdd.course.page
              ]);
              log(
                "elP.active === 1 -------------------------------------------------------------------------------"
              );

              $listItem.setAttribute("aria-current", true);
              $listItem.setAttribute(onclick, "return false;");

              $listItem.classList.toggle("list-group-item-success");

              $button.setAttribute("aria-expanded", true);

              $button.classList.toggle("collapsed");
              $collapse.classList.toggle("show");
            }

            $listItem.textContent = elP[`${currentLanguage}_name`];

            //LINK
            // $listItem.setAttribute("href", elP[`${currentLanguage}_link`]);
            $listItem.setAttribute("href", "#");
            $listItem.setAttribute("data-en", elP.en_link);
            $listItem.setAttribute("data-fr", elP.fr_link);

            $listItem.addEventListener("click", function (e) {
              let vv = e.target;
              log(vv);
              log(vv.textContent);
              log(vv.href);
              log(vv.dataset.global);
            });

            $listGroup.appendChild($listItem);
            // $accordionBody.appendChild($listItem);
            $accordionBody.appendChild($listGroup);

            counter++;
          }
          $buttonSpan.textContent = counter;
        });
        $collapse.appendChild($accordionBody);

        // $button.appendChild($buttonSpan);
        $header.appendChild($button);
        $item.appendChild($header);
        $item.appendChild($collapse);

        // $accordion.appendChild($item);
        $toc_df.appendChild($item);
        //   } else if (el.type === "page" && el.local === undefined) {
      } else if (el.type === "page" && el.local === 0) {
        log("el page", el);
        $listGroup = document.createElement("div");
        $listGroup.classList.add("list-group", "list-group-flush");

        $lastListItem = document.createElement("a");
        $lastListItem.classList.add(
          "list-group-item",
          "list-group-item-action",
          "rounded-0"
        );
        $lastListItem.textContent = el[`${currentLanguage}_name`];
        // $lastListItem.setAttribute("href", el[`${currentLanguage}_link`]);
        $lastListItem.setAttribute("href", "#");

        $lastListItem.setAttribute("data-en", el.en_link);
        $lastListItem.setAttribute("data-fr", el.fr_link);

        $lastListItem.setAttribute("data-global", el.global);

        if (el.active === 1) {
          if (el.local === 0) {
            tdd.course.title = arr[0][`${currentLanguage}_name`];
            // tdd.course.module = arr[idx][`${currentLanguage}_name`]
            tdd.course.module = tdd.course.title;
            tdd.course.page = el[`${currentLanguage}_name`];
          }

          log("Course Data => ", [
            tdd.course.title,
            tdd.course.module,
            tdd.course.page
          ]);

          $lastListItem.setAttribute("aria-current", true);

          $lastListItem.classList.toggle("list-group-item-success");

          // $button.setAttribute("aria-expanded", true);
          // // $button.classList.remove("collapsed");
          // // $collapse.classList.add("show");
          // $button.classList.toggle("collapsed");
          // $collapse.classList.toggle("show");
        }

        $lastListItem.addEventListener("click", function (e) {
          let vv = e.target;
          log(vv);
          log(vv.textContent);
          log(vv.href);
          log(vv.dataset.global);
        });

        $listGroup.appendChild($lastListItem);
        // $accordion.appendChild($listGroup);
        $toc_df.appendChild($listGroup);
      }
    });

    // $accordion.appendChild($toc_df);

    $accordion.appendChild($toc_df);

    // $body.appendChild($accordion)

    tdd.ready.toc = true;

    log("generate_toc = <");
    return $accordion;
  }
};
tdd.toc.init();
// tdd.addEventListener('load', tdd.App.process_data)
log("tdd.toc -------< END");

/*  ui.js
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/

/*!
===============================================================
* Script: tdd.ui v1.0.1
* Autor: Ahmed Hussein
* Copyright 2011-2023
* Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
===============================================================
20230131:
    	- 
===============================================================
TO FIX:
    	- 
===============================================================
*/
log("tdd.ui -------> START");
tdd.ui = {
  // init UI elements
  init() {
    log("tdd.ui init > loaded");

    const interval = setInterval(() => {
      info("Waiting for TOC...");
      // if( !tdd.js_loaded ) {
      if (!tdd.ready.toc) {
        log("Waiting for TOC");
        //Do Something While Waiting / Spinner Gif etc.
      } else {
        info("TOC found...");
        clearInterval(interval);
        // log("$toc => ", $toc);
        // log("tdd.toc.list => ", tdd.toc.list);

        this.init_Elements();
        // tdd.ready.ui = true;
        // import('./assets/js/core/toc.js')
        // import('./assets/js/core/ui.js')
      }
    }, 500);

    // this.generate_ui("hi");

    // this.init_Elements();
    return;
  },

  // elements
  init_Elements() {
    log("tdd.ui init elements > loaded");

    /*
    init_Header();
    init_Main();
    
    init_navOptions();
    init_Footer();
    */
    //  this.generate_ui("hi");
    this.course_info();
  },

  // elements
  init_Header() {
    log("tdd.ui init elements > loaded");

    /* HEADER
    globalThis.$header = document.createElement("header");
    $body.insertBefore($header, $modal_menu);

    
    init_Brand();
    init_Navbar();
    $header.classList.add('container');
    */
  },

  // elements
  init_Main() {
    log("tdd.ui init elements > loaded");

    /* MAIN
        // parent of saba publisher container
    globalThis.$main = document.createElement("main");
    $body.insertBefore($main, $modal_menu);

    $main.classList.add('container', 'flex-shrink-0', 'bg-transparent');
    $main.appendChild($pageDiv);
    */
  },

  // elements
  init_Brand() {
    log("tdd.ui init elements > loaded");

    /* BRAND

        let $brandSource = `./dnd_logo_${currentLanguage}.svg`;


    $brand.src = $brandSource;
    
    //  $brand.alt = 'Defence logo';
    $brand.setAttribute('alt', 'Defence logo');
    $brand.setAttribute('title', 'Defence logo');
    $brand.setAttribute('tooltip', 'Defence logo');
    $brand.style.height = '20px';
    $brand.classList.add('ml-auto', 'bd-highlight');

    $titleName.classList.add('mr-3');

    $brand_bar.classList.add('py-3');
    $brand_bar.style.display = 'flex';
    //    $brand_bar.appendChild($titleName);
    $brand_bar.appendChild($chapterName);
    $brand_bar.appendChild($brand);

    $header.appendChild($brand_bar);
    
    */
  },

  // elements
  init_Nav_Options() {
    log("tdd.ui init elements > loaded");

    /* NAV OPTIONS
        globalThis.$navOptions = document.createElement("div");

    $navOptions.id = 'navOptions';
    $navOptions.classList.add('btn-group', 'btn-group-sm', 'btn-block');
    $navOptions.setAttribute("aria-label", "Course Options");
    $navOptions.setAttribute("role", "group");


    globalThis.nestedPath = tdd_dictionary.labels.modal_options;

    globalThis.navOptions = reuse_getNestedArr(currentLanguage, nestedPath, false);
    globalThis.navOptions_names = reuse_getNestedArr(currentLanguage, nestedPath, true);
    globalThis.navOptions_icons = reuse_getNestedArr('icon', nestedPath, true);

    let option_text = '';
    let option_icon = '';

    for (let i = 0; i < navOptions.length; i++) {
        let el = document.createElement("button").cloneNode(true);

        el.id = navOptions[i];
        el.setAttribute("title", navOptions[i]);
        el.setAttribute("tooltip", navOptions[i]);
        el.setAttribute("data-toggle", navOptions[i]);
        el.setAttribute("data-placement", 'bottom');
        el.classList.add('btn', 'btn-dark');

        option_text = navOptions_names[i];
        option_icon = '<i class="fa fa-' + navOptions_icons[i] + '"></i>';
        el.innerHTML = `${option_icon} ${option_text}`;
        $navOptions.appendChild(el);
    }
    */
  },

  // elements
  init_Footer() {
    log("tdd.ui init elements > loaded");

    /* FOOTER
        globalThis.$footer_nav = document.createElement("div");
    $footer_nav.id = 'footer_nav';

    $footerContainer.appendChild($footer_nav);




    globalThis.$footer_bar = document.createElement("div");
    $footer_bar.id = 'footer_bar';

    globalThis.$copyright = document.createElement("p");
    $copyright.id = "copyright";
    $copyright.innerHTML = '';

    $footer_bar.appendChild($copyright);
    updateCopyright();

    globalThis.$footer_brand = document.createElement("img");
    $footer_brand.id = 'footer_brand';

    $footer_brand.src = './canada_logo.svg';
    $footer_brand.alt = 'Symbol of the Government of Canada';
    $footer_brand.style.height = '20px';

    $footer_bar.appendChild($footer_brand);

    $footerContainer.appendChild($footer_bar);







    globalThis.$footer = document.createElement("footer");

    globalThis.$footerContainer = document.createElement("div");
    $footerContainer.id = 'footerContainer';
    $footerContainer.classList.add('container');

    $footer.appendChild($footerContainer);

    $body.insertBefore($footer, $modal_menu);

    $footer.classList.add('footer', 'mt-auto', 'py-3');

    init_footer_nav();
    init_footer_bar();




    */
  },

  // elements
  init_Page_Nav() {
    log("tdd.ui init elements > loaded");

    /*  PAGE NAV
        globalThis.$pagePrevious = document.querySelector(".btn_previous");
    globalThis.$pageNext = document.querySelector(".btn_next");
    //  globalThis.$exit = document.querySelector(".btn_exit");

    $pagePrevious.children[0].innerHTML = '';
    $pageNext.children[0].innerHTML = ''
    //  $exit.children[0].innerHTML = ''

    // Bring buttons to their parent level instead of being inside a div
    let $pagePreviousChild = $pagePrevious.children[0];
    $pagePreviousChild.className = $pagePrevious.className;
    $pagePrevious = $pagePreviousChild.cloneNode(true);

    let $pageNextChild = $pageNext.children[0];
    $pageNextChild.className = $pageNext.className;
    $pageNext = $pageNextChild.cloneNode(true);

    //  let $exitChild = $exit.children[0];
    //  $exitChild.className = $exit.className;
    //  $exit = $exitChild.cloneNode(true);

    locale_pageNav()
    */

    // this.generate_ui("hi");
    return;
  },

  course_info() {
    log("$toc => ", $toc);
    log("tdd.toc.list => ", tdd.toc.list);

    let $title_name = document.createElement("h3");
    let $module_name = document.createElement("h3");
    let $page_name = document.createElement("h1");

    $title_name.classList.add("title-name");
    $module_name.classList.add("module-name");
    $page_name.classList.add("page-name");

    $title_name.textContent = tdd.course.title;
    $module_name.textContent = tdd.course.module;
    $page_name.textContent = tdd.course.page;

    log("course data => ", tdd.course);

    // log('module => ', tdd.toc.list[0][`${currentLanguage}_name`])
    // log('page => ', tdd.toc.list[0][`${currentLanguage}_name`])

    this.generate_ui("hi");
    /*
    log("course info generate > loaded => ");
    globalThis.$titleName = document.createElement("h3");
    globalThis.$chapterName = document.createElement("h3");
    globalThis.$sectionName = document.createElement("h2");
    globalThis.$pageName = document.createElement("h1");


    globalThis.pageInSection = VarPageInSection.getValue();
    globalThis.sectionPages = VarPagesInSection.getValue();
    globalThis.pageInChapter = VarPageInChapter.getValue();
    globalThis.chapterPages = VarPagesInChapter.getValue();

    //Will not use these since we have EN, FR and popups
    globalThis.pageInTitle = VarPageInTitle.getValue();
    globalThis.titlePages = VarPagesInTitle.getValue();

    //Will not use these since the original vars are available
    globalThis.sectionPage = Var_sectionPage.getValue();
    globalThis.titlePage = Var_titlePage.getValue();

    */
    // return;
  },

  // Build UI
  generate_ui(ff) {
    //   tdd.ui_loaded = true;
    //   tdd.ready.ui = true;

    // const interval = setInterval(() => {
    //     info('Waiting for TOC...')
    //     // if( !tdd.js_loaded ) {
    //     if( !tdd.ready.toc ) {
    //         log('Waiting for TOC')
    //         //Do Something While Waiting / Spinner Gif etc.
    //     }else{
    //         info('Data found...')
    //         clearInterval(interval)
    //           // tdd.ready.ui = true;
    //           // import('./assets/js/core/toc.js')
    //           // import('./assets/js/core/ui.js')
    //     }
    //     }, 500);

    tdd.ready.ui = true;

    ff ? log("tdd.ui generate > loaded => ", ff) : "";

    return;
  }
};
tdd.ui.init();
// tdd.ui.init_Page_Nav();
// tdd.addEventListener('load', tdd.App.process_data)
log("tdd.ui -------< END");

/*
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
*/
